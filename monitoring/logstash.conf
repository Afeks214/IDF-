# IDF Testing Infrastructure - Logstash Configuration
# Military-grade log processing pipeline

input {
  # Backend application logs
  file {
    path => "/var/log/backend/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
    type => "backend"
    tags => ["idf", "backend", "application"]
  }

  # Nginx access logs
  file {
    path => "/var/log/nginx/access.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "nginx_access"
    tags => ["idf", "nginx", "access"]
  }

  # Nginx error logs
  file {
    path => "/var/log/nginx/error.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "nginx_error"
    tags => ["idf", "nginx", "error"]
  }

  # System logs via syslog
  syslog {
    port => 5514
    type => "syslog"
    tags => ["idf", "system", "syslog"]
  }

  # Docker container logs
  tcp {
    port => 5000
    type => "docker"
    tags => ["idf", "docker", "container"]
  }

  # Security logs
  file {
    path => "/var/log/security/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
    type => "security"
    tags => ["idf", "security", "audit"]
  }
}

filter {
  # Parse timestamp for all logs
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
  }

  # Backend application log processing
  if [type] == "backend" {
    # Parse JSON logs
    json {
      source => "message"
    }

    # Extract log level
    mutate {
      add_field => { "log_level" => "%{level}" }
    }

    # Parse Hebrew text fields
    if [message] =~ /[\u0590-\u05FF]/ {
      mutate {
        add_tag => ["hebrew"]
      }
    }

    # Security-related log processing
    if [logger] == "security" {
      mutate {
        add_tag => ["security_event"]
      }
    }

    # Performance metrics extraction
    if [response_time] {
      mutate {
        convert => { "response_time" => "float" }
        add_field => { "performance_category" => "api_response" }
      }
    }
  }

  # Nginx access log processing
  if [type] == "nginx_access" {
    grok {
      match => { 
        "message" => "%{IPORHOST:client_ip} - %{DATA:user_name} \[%{HTTPDATE:access_time}\] \"%{WORD:http_method} %{DATA:url} HTTP/%{NUMBER:http_version}\" %{NUMBER:response_code} %{NUMBER:body_sent_bytes} \"%{DATA:referrer}\" \"%{DATA:agent}\"" 
      }
    }

    # Convert numeric fields
    mutate {
      convert => { 
        "response_code" => "integer"
        "body_sent_bytes" => "integer"
        "http_version" => "float"
      }
    }

    # Classify response codes
    if [response_code] >= 500 {
      mutate {
        add_field => { "response_category" => "server_error" }
        add_tag => ["error"]
      }
    } else if [response_code] >= 400 {
      mutate {
        add_field => { "response_category" => "client_error" }
        add_tag => ["warning"]
      }
    } else if [response_code] >= 200 {
      mutate {
        add_field => { "response_category" => "success" }
      }
    }

    # GeoIP lookup for client IP
    geoip {
      source => "client_ip"
      target => "geoip"
    }

    # Security analysis
    if [client_ip] !~ /^(10\.|192\.168\.|172\.(1[6-9]|2[0-9]|3[01])\.)/ {
      mutate {
        add_tag => ["external_access"]
      }
    }
  }

  # Security log processing
  if [type] == "security" {
    # Parse security events
    if [event_type] == "login_attempt" {
      mutate {
        add_field => { "security_category" => "authentication" }
      }
    }

    if [event_type] == "unauthorized_access" {
      mutate {
        add_field => { "security_category" => "authorization" }
        add_tag => ["security_alert"]
      }
    }

    # Failed login detection
    if [event_type] == "login_failed" {
      mutate {
        add_tag => ["failed_login"]
      }
    }

    # Suspicious activity detection
    if [user_agent] =~ /(bot|crawler|scanner|exploit)/ {
      mutate {
        add_tag => ["suspicious_activity"]
      }
    }
  }

  # Docker container log processing
  if [type] == "docker" {
    # Parse Docker JSON logs
    json {
      source => "message"
    }

    # Extract container information
    mutate {
      add_field => { "container_name" => "%{[docker][container_name]}" }
      add_field => { "container_id" => "%{[docker][container_id]}" }
    }
  }

  # Common field processing
  mutate {
    # Add environment information
    add_field => { 
      "environment" => "production"
      "system" => "idf-testing"
      "parsed_at" => "%{@timestamp}"
    }

    # Remove unwanted fields
    remove_field => [ "host", "path", "beat", "input", "prospector", "offset" ]
  }

  # Hebrew text processing
  if "hebrew" in [tags] {
    # Normalize Hebrew text
    mutate {
      gsub => [
        "message", "[\u200E\u200F\u202A-\u202E]", ""
      ]
    }
  }
}

output {
  # Send to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "idf-logs-%{+YYYY.MM.dd}"
    
    # Document mapping
    template_name => "idf-logs"
    template_pattern => "idf-logs-*"
    template => {
      "index_patterns" => ["idf-logs-*"],
      "settings" => {
        "number_of_shards" => 1,
        "number_of_replicas" => 1,
        "analysis" => {
          "analyzer" => {
            "hebrew_analyzer" => {
              "type" => "custom",
              "tokenizer" => "standard",
              "filter" => ["lowercase", "hebrew_normalization"]
            }
          },
          "filter" => {
            "hebrew_normalization" => {
              "type" => "pattern_replace",
              "pattern" => "[\u200E\u200F\u202A-\u202E]",
              "replacement" => ""
            }
          }
        }
      },
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" },
          "message" => { 
            "type" => "text",
            "analyzer" => "hebrew_analyzer"
          },
          "level" => { "type" => "keyword" },
          "logger" => { "type" => "keyword" },
          "client_ip" => { "type" => "ip" },
          "response_code" => { "type" => "integer" },
          "response_time" => { "type" => "float" },
          "tags" => { "type" => "keyword" }
        }
      }
    }
  }

  # Debug output for development
  if [type] == "debug" {
    stdout { 
      codec => rubydebug 
    }
  }

  # Send security alerts to separate index
  if "security_alert" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "idf-security-alerts-%{+YYYY.MM.dd}"
    }
  }

  # Send critical errors to alerting system
  if "error" in [tags] and [log_level] == "CRITICAL" {
    http {
      url => "http://alertmanager:9093/api/v1/alerts"
      http_method => "post"
      content_type => "application/json"
      format => "json"
      mapping => {
        "labels" => {
          "alertname" => "CriticalLogError"
          "severity" => "critical"
          "service" => "%{type}"
          "instance" => "%{host}"
        }
        "annotations" => {
          "summary" => "Critical error in %{type} service"
          "description" => "%{message}"
        }
        "startsAt" => "%{@timestamp}"
      }
    }
  }
}